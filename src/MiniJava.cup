import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

parser code
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
       DateTimeFormatter dtf3 = DateTimeFormatter.ofPattern("HH:mm:ss");

  public static ArrayList<String> ErroresSintacticos=new ArrayList<String>();

    public void syntax_error(Symbol s) {
             ErroresSintacticos.add("["+dtf3.format(LocalDateTime.now())+"]:"+"Error Sintactico: "+s.value.toString()+" Linea: "+(s.right+1)+"; Y en posicion "+s.right);
    JOptionPane.showMessageDialog(null, "["+dtf3.format(LocalDateTime.now())+"]:"+"Error Línea "+(s.left+1)+" y en la posicion "+s.right+ ". "+s.value+" No es recconocible.", "Error" , JOptionPane.WARNING_MESSAGE);

    }

     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Errores Irrecuperables");
        }





:}

terminal IF, ELSE, SWITCH, CASE, DEFAULT, WHILE, DO, FOR, BREAK, CONTINUE, RETURN, FINAL, BOOLEAN, BYTE, SHORT, INT, LONG, FLOAT, DOUBLE, STRING, CHAR, CLASS, THIS, STATIC, NEW, ENUM, ASSERT, NATIVE, VOID, STRICTFP, INTERFACE, IMPLEMENTS, ABSTRACT, EXTENDS, SUPER, CATCH, FINALLY, THROW, THROWS, TRY, SYNCHRONIZED, VOLATILE, TRANSIENT, NULL_LITERAL, PRIVATE, PUBLIC, PROTECTED, PACKAGE, IMPORT, INCREMENT, DECREMENT, LOGICAL_AND, LOGICAL_OR, LOGICAL_NOT, PLUS, MINUS, TIMES, DIVIDE, MODULE, EQUALS, GREATER_EQUALS, SMALLER_EQUALS, GREATER, SMALLER, DIFFERENT, QUOTES, INTERROGATION, BITWISE_NOT, LEFTSHIFT, RIGHTSHIFT, DOUBLE_RIGHTSHIFT, BITWISE_OR, BITWISE_AND, BITWISE_XOR, ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, TIMES_ASSIGNMENT, DIVIDE_ASSIGNMENT, MODULE_ASSIGNMENT, BITWISE_NOT_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_AND_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT, LEFTSHIFT_ASSIGNMENT, RIGHTSHIFT_ASSIGNMENT, LEFT, RIGHT, LEFT_CURLY, RIGHT_CURLY, LEFT_BRACKET, RIGHT_BRACKET, SEMICOLON, COLON, DOT, COMMA, BOOLEAN_LITERAL, INTEGER_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER, ERROR, CHARACTER_LITERAL, STRING_LITERAL;



nonterminal Finalizado;
nonterminal Literal, Identificador;

nonterminal Tipo, TipoPrimitivo, ReferenciaTipo, TipoArreglo;
nonterminal Nombre, NombreSimple, NombreCualificado;
nonterminal CompilacionUnida, TipoDeclaracion, TipoDeclaraciones, DeclaracionImport, DeclaracionImports, DeclaracionPackage;
nonterminal Modificadores, Modificador;
nonterminal DeclaracionClase, DeclaracionClases, Super, CuerpoClase, DeclaracionMiembrodeClase, DeclaracionMiembrosdeClase;
nonterminal FieldDeclaration, IdentificadorList;
nonterminal MethodDeclaration, MethodHeader, MethodDeclarator, FormalParameterList, FormalParameter, Throws, MethodBody;
nonterminal Block, BlockStatement, BlockStatements, LocalVariableDeclarationStatement, LocalVariableDeclaration, VariableDeclarators, VariableDeclarator, Statement, ExpressionStatement, StatementExpression, IfThenStatement, IfThenElseStatement, WhileStatement, DoWhileStatement, ReturnStatement, BreakStatement, ContinueStatement, ForStatement, ForInit, ForUpdate, StatementExpressionList;
nonterminal Expression, AssignmentExpression, ConditionalExpression, InfixExpression, InfixOp, PrefixExpression, PrefixOp, PostfixExpression, Suffix, Suffixs, ArrayAccess, Selector, Selectors, FieldAccess, MethodInvocation, ArgumentList, Primary, ClassInstanceCreationExpression, ArrayCreationExpression, Dimension, Dimensions;



precedence left CLASS, PUBLIC, PRIVATE, PROTECTED, STATIC, NATIVE, FINAL, ABSTRACT, TRANSIENT, SYNCHRONIZED, VOLATILE;
precedence left ELSE, LEFT, LEFT_CURLY, LEFT_BRACKET, DOT;
precedence left IDENTIFIER;


//SINTAXIS
Finalizado ::= CompilacionUnida
;

Tipo ::= TipoPrimitivo
    | ReferenciaTipo
;
TipoPrimitivo ::= INT
    | BOOLEAN
    | STRING
    | DOUBLE
    | FLOAT
    | CHAR
    | LONG
    | SHORT
    | BYTE
;


TipoArreglo ::= TipoPrimitivo LEFT_BRACKET RIGHT_BRACKET
    | Nombre LEFT_BRACKET RIGHT_BRACKET
    | TipoArreglo LEFT_BRACKET RIGHT_BRACKET
;

Nombre ::= NombreSimple
    | NombreCualificado
;
NombreSimple ::= Identificador
;
NombreCualificado ::= Nombre DOT Identificador
;

CompilacionUnida ::=
    | TipoDeclaraciones
    | DeclaracionImports TipoDeclaraciones
    | DeclaracionPackage TipoDeclaraciones
    | DeclaracionPackage DeclaracionImports TipoDeclaraciones
;
TipoDeclaracion ::= DeclaracionClases
    | SEMICOLON
;
TipoDeclaraciones ::= TipoDeclaracion
    | TipoDeclaraciones TipoDeclaracion
;
DeclaracionImport ::= IMPORT Nombre SEMICOLON
    | IMPORT Nombre DOT TIMES SEMICOLON
;
DeclaracionImports ::= DeclaracionImport
    | DeclaracionImports DeclaracionImport
;
DeclaracionPackage ::= PACKAGE Nombre SEMICOLON
;

Modificadores ::= Modificador
    | Modificadores Modificador
;
Modificador ::= PUBLIC
    | PRIVATE
    | PROTECTED
    | STATIC
    | NATIVE
    | FINAL
    | ABSTRACT
    | TRANSIENT
    | SYNCHRONIZED
    | VOLATILE
;

DeclaracionClase ::= CLASS Identificador CuerpoClase
    | CLASS Identificador Super CuerpoClase
    | Modificadores CLASS Identificador CuerpoClase
    | Modificadores CLASS Identificador Super CuerpoClase
;
DeclaracionClases ::= DeclaracionClase
    | DeclaracionClases DeclaracionClase
;
Super ::= EXTENDS Nombre
;
CuerpoClase ::= LEFT_CURLY RIGHT_CURLY
    | LEFT_CURLY DeclaracionMiembrosdeClase RIGHT_CURLY
;
DeclaracionMiembrosdeClase ::= DeclaracionMiembrodeClase
    | DeclaracionMiembrosdeClase DeclaracionMiembrodeClase
;
DeclaracionMiembrodeClase ::= FieldDeclaration
    | MethodDeclaration
;

FieldDeclaration ::= Modificadores Tipo IdentificadorList SEMICOLON
    | Tipo IdentificadorList SEMICOLON
    | Modificadores Tipo IdentificadorList ASSIGNMENT Literal SEMICOLON
    | Tipo IdentificadorList ASSIGNMENT Literal SEMICOLON
;
IdentificadorList ::= Identificador
    | IdentificadorList COMMA Identificador
;

MethodDeclaration ::= MethodHeader MethodBody
;
MethodHeader ::= Tipo MethodDeclarator
    | Tipo MethodDeclarator Throws
    | VOID MethodDeclarator
    | VOID MethodDeclarator Throws

    | Modificadores Tipo MethodDeclarator
    | Modificadores Tipo MethodDeclarator Throws
    | Modificadores VOID MethodDeclarator
    | Modificadores VOID MethodDeclarator Throws
;
MethodDeclarator ::= Identificador LEFT RIGHT
    | Identificador LEFT FormalParameterList RIGHT
;
FormalParameterList ::= FormalParameter
    | FormalParameterList COMMA FormalParameter
;
FormalParameter ::= Tipo Identificador
;
Throws ::= THROWS Nombre
;
MethodBody ::= Block
    | SEMICOLON
;

Block ::= LEFT_CURLY RIGHT_CURLY
    | LEFT_CURLY BlockStatements RIGHT_CURLY
;
BlockStatement ::= LocalVariableDeclarationStatement
    | Statement
;
BlockStatements ::= BlockStatement
    | BlockStatements BlockStatement
;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON
;
LocalVariableDeclaration ::= Tipo VariableDeclarators
;
VariableDeclarators ::= VariableDeclarator
    | VariableDeclarators COMMA VariableDeclarator
;
VariableDeclarator ::= Identificador
    | Identificador ASSIGNMENT Expression
;
Statement ::= Block
    | ExpressionStatement
    | IfThenStatement
    | IfThenElseStatement
    | WhileStatement
    | DoWhileStatement
    | ReturnStatement
    | BreakStatement
    | ContinueStatement
    | ForStatement
;
ExpressionStatement ::= SEMICOLON
    | StatementExpression SEMICOLON
;
StatementExpression ::= Expression
;
IfThenStatement ::= IF LEFT Expression RIGHT Statement
;
IfThenElseStatement ::= IF LEFT Expression RIGHT Statement ELSE Statement
;
WhileStatement ::= WHILE LEFT Expression RIGHT Statement
;
DoWhileStatement ::= DO Statement WHILE LEFT Expression RIGHT SEMICOLON
;
ReturnStatement ::= RETURN SEMICOLON
    | RETURN Expression SEMICOLON
;
BreakStatement ::= BREAK SEMICOLON
;
ContinueStatement ::= CONTINUE SEMICOLON
;
ForStatement ::= FOR LEFT SEMICOLON SEMICOLON RIGHT Statement
    | FOR LEFT ForInit SEMICOLON SEMICOLON RIGHT Statement
    | FOR LEFT ForInit SEMICOLON Expression SEMICOLON RIGHT Statement
    | FOR LEFT ForInit SEMICOLON SEMICOLON ForUpdate RIGHT Statement
    | FOR LEFT SEMICOLON Expression SEMICOLON RIGHT Statement
    | FOR LEFT SEMICOLON Expression SEMICOLON ForUpdate RIGHT Statement
    | FOR LEFT SEMICOLON SEMICOLON ForUpdate RIGHT Statement
    | FOR LEFT ForInit SEMICOLON Expression SEMICOLON ForUpdate RIGHT Statement
;
ForInit ::= StatementExpressionList
    | LocalVariableDeclaration
;
ForUpdate ::= StatementExpressionList
;
StatementExpressionList ::= StatementExpression
    | StatementExpressionList COMMA StatementExpression
;

Expression ::= ConditionalExpression
    | AssignmentExpression
;
AssignmentExpression ::= ConditionalExpression ASSIGNMENT Expression
;
ConditionalExpression ::= InfixExpression
    | InfixExpression INTERROGATION Expression COLON ConditionalExpression
;
InfixExpression ::= PrefixExpression
    | InfixExpression InfixOp PrefixExpression
;
InfixOp ::= LOGICAL_OR
    | LOGICAL_AND
    | EQUALS
    | DIFFERENT
    | SMALLER
    | GREATER
    | GREATER_EQUALS
    | SMALLER_EQUALS
    | PLUS
    | MINUS
    | TIMES
    | DIVIDE
    | MODULE
;
PrefixExpression ::= PrefixOp PrefixExpression
    | PostfixExpression
;
PrefixOp ::= MINUS
    | LOGICAL_NOT
;
PostfixExpression ::= Primary
    | Primary Suffixs
    | Nombre | Nombre Suffixs
;
Suffixs ::= Suffix
    | Suffixs Suffix
;
Suffix ::= ArrayAccess
    | FieldAccess
    | MethodInvocation
    | Nombre
    | INCREMENT
    | DECREMENT
;
ArrayAccess ::= LEFT_BRACKET Expression RIGHT_BRACKET
;
Selector ::= DOT Identificador
;
Selectors ::= Selector
    | Selectors Selector
;
FieldAccess ::= Selectors
;
MethodInvocation ::= LEFT RIGHT
    | LEFT ArgumentList RIGHT
    | Selectors LEFT RIGHT
    | Selectors LEFT ArgumentList RIGHT
;
ArgumentList ::= Expression
    | ArgumentList COMMA Expression
;
Primary ::= LEFT Expression RIGHT
    | THIS
    | Literal
    | SUPER FieldAccess
    | SUPER MethodInvocation
    | ClassInstanceCreationExpression
    | ArrayCreationExpression
;
ClassInstanceCreationExpression ::= NEW Nombre LEFT RIGHT
    | NEW Nombre LEFT ArgumentList RIGHT
;
ArrayCreationExpression ::= NEW TipoPrimitivo LEFT_BRACKET Expression RIGHT_BRACKET
    | NEW TipoPrimitivo LEFT_BRACKET Expression RIGHT_BRACKET Dimensions
    | NEW Nombre LEFT_BRACKET Expression RIGHT_BRACKET
    | NEW Nombre LEFT_BRACKET Expression RIGHT_BRACKET Dimensions
;
Dimension ::= LEFT_BRACKET RIGHT_BRACKET
    | LEFT_BRACKET Expression RIGHT_BRACKET
;
Dimensions ::= Dimension
    | Dimensions Dimension
;

Identificador ::= IDENTIFIER
;
Literal ::= INTEGER_LITERAL
    | FLOATING_POINT_LITERAL
    | BOOLEAN_LITERAL
    | CHARACTER_LITERAL
    | STRING_LITERAL
    | NULL_LITERAL
;
ReferenciaTipo ::= Nombre
    | TipoArreglo
;
